@page "/"
@using CatSdk.CryptoTypes;
@using CatSdk.Facade;
@using CatSdk.Symbol;
@using CatSdk.Symbol.Factory;
@using CatSdk.Utils;
@using NageXymSharpApps.Client.Models;
@using System.Text;
@using NageXymSharpApps.Shard.Models;
@using NageXymSharpApps.Shared.Models;
@using Newtonsoft.Json;
@using nagexymsharpweb.Excels;
@using nagexymsharpweb.Models;
@using System.ComponentModel
@using NageXymSharpApps.Client.Modules;
@using AntDesign
@using static NageXymSharpApps.Client.Models.Enums;
@using System.Timers;
@using Microsoft.JSInterop;
@inject IMessageService _message
@inject INotificationService notice
@inject HttpClient httpClient
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div>
    <Row Justify="start">
        <h2>@_title</h2>
        <Paragraph Style="font-size:1rem;font-weight:bold;">@_networkName</Paragraph>
    </Row>
    <Row Justify="start">
        <Paragraph Style="font-size:0.8rem;">
            Excelに記載されたアドレスに対してまとめて投げXYMを行うためのツールです。
            <br /> 1 から 3 STEPを順番に行うことで簡単に多人数に投げXYMすることができます。
            <br /><br />読込を行うExcelファイルはSYMBOLタウンリストのフォーマットを想定しています。
            <br /><Text Type="danger">SYMBOLタウンリストを使用する場合は画像や図形を削除してからお使い下さい。(※エラーになってしまうのでm(__)m)</Text>
            <br /><br />
            <a href="https://docs.google.com/spreadsheets/d/1X2AsmEOXpMlwZ9r6yA-2sqEfTBpFnst_nF1nXhZjLCk/edit#gid=0" target="_blank">SYMBOLタウンリストのリンクはこちら</a>
            <br /><br />
            さっそく始めてみましょう！
        </Paragraph>
    </Row>
    <div class="card-container">
        <Tabs @bind-ActiveKey="@_activeKey" Type="@TabType.Card" Style="margin-bottom:80px;">
            <TabPane Tab="Step 1" Key="1">
                <div style="display:flex;align-items: baseline;">
                    <Paragraph Style="font-size:1rem;font-weight:bold;">１．Excelファイルを読込みます。</Paragraph>
                </div>
                <Paragraph Style="font-size:0.8rem;;margin-top:0px;"><a href="https://github.com/villhell/nagexymsharp/tree/master/Excel/addresslist" target="_blank">ファイルを持っていない方はこちらのリンクには加工済みのファイルがあるのでダウンロードしてください。</a><br />※testと書いてあるのはTestnet版です。</Paragraph>
                <InputFile id="fileInput" OnChange="@UploadFiles" hidden />
                <Upload Name="files" FileList="fileList">
                    <label class="ant-btn ant-btn-primary" for="fileInput">
                        <Icon Type="upload" />
                        Excel読込
                    </label>
                </Upload>
            </TabPane>
            <TabPane Tab="Step 2" Key="2">
                <div style="display:flex;align-items: baseline;">
                    <Paragraph Style="font-size:1rem;font-weight:bold;">２．Checkボタンを押してアドレス/ネームスペースに対して送金できるかチェックします。</Paragraph>
                </div>
                <Button Type="@ButtonType.Primary" OnClick="@Check_Click">Check</Button>
                <Progress Type=ProgressType.Circle Percent =@_progress />
            </TabPane>
            <TabPane Tab="Step 3" Key="3">
                <div style="display:flex;align-items: baseline;">
                    <Paragraph Style="font-size:1rem;font-weight:bold;"> ３．Nage XYMボタンを押して下さい。</Paragraph>
                </div>
                <div>
                    <Button type="@ButtonType.Primary" OnClick="@Send_Click">Nage XYM!</Button>
                </div>
            </TabPane>
        </Tabs>
    </div>
    <div class="card-container">
        <Table DataSource="@datas"
               PageSize="100"
               Loading=_loading
               Bordered>
            <PropertyColumn Property="c=>c.Check">
                @if (string.Equals(context.Check, "OK"))
                {
                    <Tag Color="@PresetColor.Green.ToString()">@context.Check</Tag>
                }
                else if(!string.IsNullOrEmpty(context.Check))
                {
                    <Tag Color="@PresetColor.Volcano.ToString()">@context.Check</Tag>
                }
            </PropertyColumn>
            <PropertyColumn Property="c=>c.Name"></PropertyColumn>
@*            <PropertyColumn Property="c=>c.Twitter"></PropertyColumn>*@
            <PropertyColumn Property="c=>c.AddressNamespace"></PropertyColumn>
            <PropertyColumn Property="c=>c.Address"></PropertyColumn>
            <PropertyColumn Property="c=>c.MosaicNamespace"></PropertyColumn>
            <PropertyColumn Property="c=>c.Amount"></PropertyColumn>
            <PropertyColumn Property="c=>c.Message"></PropertyColumn>
        </Table>
    </div>
</div>

<style>
    [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-content,
    .card-container .ant-tabs-card .ant-tabs-content {
        height: 120px;
        margin-top: -16px;
    }

        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane,
        .card-container .ant-tabs-card .ant-tabs-content .ant-tabs-tabpane {
            background: #fff;
            padding: 16px;
        }

    [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar,
    .card-container .ant-tabs-card .ant-tabs-bar {
        border-color: #fff;
    }

        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab,
        .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab {
            border-color: transparent;
            background: transparent;
        }

        [data-theme='compact'] .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active,
        .card-container .ant-tabs-card .ant-tabs-bar .ant-tabs-tab-active {
            border-color: #fff;
            background: #fff;
        }
</style>

@code {
    private string _activeKey { get; set; } = "1";
    private static string _nodeUrl = "";
    private static HttpClient _httpClient;
    private static INotificationService _notice;
    private string _privateKey = string.Empty;
    private string _title = string.Empty;
    private string _subTitle = string.Empty;
    private List<DataItem> datas;
    private List<UploadFileItem> fileList = new List<UploadFileItem>();
    private bool _loading = false;
    private SssExtention _sss;
    private IJSObjectReference _sssObjRef;
    private string _networkName = string.Empty;
    private static Dictionary<string, Timer> _timers;
    private static IJSObjectReference _audioObjRef;
    private double _progress;

    private DotNetObjectReference<object> _objRef;
    protected override async void OnInitialized()
    {
        base.OnInitialized();
        _title = "Nage XYM Sharp";
        _subTitle = "一覧に表示されたアドレスに対してまとめて投げXYMを行うツールです！";
        datas = new List<DataItem>();

        _nodeUrl = "https://sym-test-04.opening-line.jp:3001";
        _httpClient = httpClient;
        _notice = notice;
        _progress = 0;
        _timers = new Dictionary<string, Timer>();
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(1000);
            _sss = null;
            _audioObjRef = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./js/play-sound.js"
            );
        }
        // 何度も呼び出されるので成功したらブロックする
        if (_sss != null) return;

        // SSS Extentionを読込む
        _sssObjRef = await JSRuntime.InvokeAsync<IJSObjectReference>(
            "import", "./js/sss-extention.js"
        );

        _sss = await _sssObjRef.InvokeAsync<SssExtention>("GetSssObject");
        if (_sss != null)
        {
            _networkName = _sss.activeNetworkType == (int)SymbolNetworkType.Mainnet ? "Mainnet" : "Testnet";
            //break;
        }
        else
        {
            _networkName = "unknown network";
        }
        StateHasChanged();
        await _sssObjRef.DisposeAsync();
    }

    #region Excelファイル読込み
    /// <summary>
    /// Excelファイル読込み
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        try
        {
            var file = e.GetMultipleFiles().First();

            var excelFileData = new byte[file.Size];
            await file.OpenReadStream(file.Size).ReadAsync(excelFileData);

            var tempFilePath = Path.GetTempFileName() + file.Name;

            // 拡張子をチェック
            if (!string.Equals(Path.GetExtension(file.Name), ".xlsx"))
            {
                await _message.Warning("拡張子が.xlsxではありません。");
                return;
            }

            using (var fs = File.Create(tempFilePath))
            using (var binaryWriter = new BinaryWriter(fs))
            {
                binaryWriter.Write(excelFileData);
            }
            // データクリア
            datas = new List<DataItem>();

            // ローディング開始
            _loading = true;

            StateHasChanged();

            var config = new MessageConfig
            {
                Content = "Loading...",
            };
            await _message.Loading(config);

            // Excelファイル読込み
            ExcelManager excel = new ExcelManager(tempFilePath);
            datas = await excel.ReadExcelFileAsync();

            // ローディング終了
            _loading = false;
            StateHasChanged();
            config = new MessageConfig
            {
                Content = "Loaded",
                Duration = 2,
            };
            await _message.Success(config);
            _progress = 0;
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }
        finally
        {
            // ローディング終了
            _loading = false;
            StateHasChanged();
        }
    }
    #endregion

    #region ノードURLを取得
    /// <summary>
    /// ノードURLを取得
    /// </summary>
    /// <param name="networkType"></param>
    /// <returns></returns>
    private async Task GetNodeUrl(int networkType)
    {
        // testnet
        if (networkType == 152)
        {
            // testnetの場合は固定のノードを使用する
            _nodeUrl = "https://sym-test-04.opening-line.jp:3001";
        }
        // mainnet
        else
        {
            _nodeUrl = await JSRuntime.InvokeAsync<string>("NageXymSharpApps.GetActiveNode", new object[] { _sss.activeNetworkType });
        }
        _nodeUrl = Utils.TrimingLastSlash(_nodeUrl);
    }
    #endregion

    #region 一覧に表示されたアドレス/ネームスペースをチェックする
    /// <summary>
    /// 一覧に表示されたアドレス/ネームスペースをチェックする
    /// </summary>
    private async Task Check_Click()
    {
        if (_sss.activeNetworkType == (int)SymbolNetworkType.Mainnet)
        {
            await GetNodeUrl(_sss.activeNetworkType);
        }

        // Azureでデプロイするとhttpsになるので3000は使えない
        var port = new Uri(_nodeUrl).Port;
        if (port != 3001)
        {
            await _message.Warning("ポート3001に対応したノードを指定して下さい。");
            return;
        }
        // 一覧に何も表示されていなければ以降の処理を行わない
        if (datas.Count == 0)
        {
            await _message.Warning("Excelファイルを読み込んでください。");
            return;
        }

        // ノードが入力されていなければ以降の処理を行わない
        if (string.IsNullOrEmpty(_nodeUrl))
        {
            await _message.Warning("ノードのURLを指定して下さい。");
            return;
        }

        try
        {
            // ローディング開始
            string key = $"updatable-{DateTime.Now.Ticks}";
            var config = new MessageConfig
            {
                Content = "Checking...",
                Duration = 1
            };
            await _message.Loading(config);

            //StateHasChanged();

            // モザイクは重複する可能性が高いので一度チェックしたものは保持しておく
            var mosaicDict = new Dictionary<string, MosaicNamespaceInfo>();

            // グリッド内のデータをチェックする
            var validator = new Validator(_httpClient, datas, _nodeUrl);
            double count = 0;
            _progress = 0;
            var max = datas.Count;
            foreach(var item in datas)
            {
                // 進捗
                count++;

                _progress = Math.Round((count / max) * 100, 1);
                Console.WriteLine(_progress);
                await validator.ValidateItems(item, mosaicDict);
                
                if(item.Valid)
                {
                    item.Check = "OK";
                }
                else
                {
                    item.Check = "NG";
                }
                StateHasChanged();
            }


            await _message.Success(new MessageConfig
            {
                Content = "Complete!",
                Duration = 3
            });
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
            Console.WriteLine(ex.Message);
        }
        finally
        {
            // ローディング終了
            _loading = false;
            StateHasChanged();
        }
    }
    #endregion

    #region Nage XYMボタンクリック
    /// <summary>
    /// Nage XYMボタンクリック
    /// </summary>
    /// <returns></returns>
    private async Task Send_Click()
    {
        try
        {
            if (_sss.activeNetworkType == (int)SymbolNetworkType.Mainnet)
            {
                await GetNodeUrl(_sss.activeNetworkType);
            }

            // ネットワーク情報を取得
            var networkInfo = await Utils.GetNetworkInfo(_nodeUrl, httpClient);

            // ネットワーク情報が正しく取得できなかった
            if (networkInfo == null)
            {
                await _message.Warning("ネットワーク情報が取得できませんでした。処理を中断します。");
                return;
            }

            var network = string.Equals(networkInfo!.Name, "mainnet") ? CatSdk.Symbol.Network.MainNet : CatSdk.Symbol.Network.TestNet;
            var facade = new SymbolFacade(network);
            var publicKey = new PublicKey(Converter.HexToBytes(_sss.activePublicKey));
            var txs = new List<IBaseTransaction>();

            // グリッドの内容からトランザクションを生成
            foreach (var item in datas)
            {
                // Check列未入力の場合
                if (string.IsNullOrEmpty(item.Check))
                {
                    await _message.Warning("チェック済みでないデータがあるため処理を中断します。");
                    return;
                }

                // OK以外の場合は無視して次の行へ
                if (!string.Equals(item.Check, "OK")) continue;

                // モザイク量に対してdivisibilityで桁をあわせる
                var amount = (ulong)(item.Amount * Math.Pow(10, item.MosaicNamespaceInfo.MosaicInfo.Divisibility));
                // モザイクIDをulongに変換
                var mosaicId = ulong.Parse(item.MosaicNamespaceInfo.MosaicInfo.Id, System.Globalization.NumberStyles.HexNumber);
                txs.Add(CreateTransaction(network, publicKey, item.Address, mosaicId, amount, Converter.Utf8ToPlainMessage(item.Message)));
            }

            // トランザクションをアナウンス
            if (txs.Count > 0)
            {
                // 作成したトランザクションを100件毎にアナウンスする。
                foreach(var chunk in txs.Chunk(Consts.AGGREGATE_TX_COUNT))
                {
                    await AnnounceAsync(network, facade, publicKey, new List<IBaseTransaction?>(chunk));
                }
            }
        }
        catch (Exception ex)
        {
            await _message.Error(ex.Message);
        }
    }
    #endregion

    #region トランザクションを作成
    /// <summary>
    /// トランザクションを作成
    /// </summary>
    /// <param name="network"></param>
    /// <param name="publicKey"></param>
    /// <param name="address"></param>
    /// <param name="mosaicId"></param>
    /// <param name="amount"></param>
    /// <param name="message"></param>
    /// <returns></returns>
    private EmbeddedTransferTransactionV1 CreateTransaction(Network network, PublicKey publicKey, string address, ulong mosaicId, ulong amount, byte[] message)
    {
        var networkType = string.Equals(network.Name, "mainnet") ? NetworkType.MAINNET : NetworkType.TESTNET;
        return new EmbeddedTransferTransactionV1
            {
                Network = networkType,
                SignerPublicKey = publicKey,
                RecipientAddress = new UnresolvedAddress(Converter.StringToAddress(address)),
                Mosaics = new UnresolvedMosaic[]
                    {
                    new()
                    {
                        MosaicId = new UnresolvedMosaicId(mosaicId),
                        Amount = new Amount(amount)
                    }
                    },
                Message = message
            };
    }
    #endregion

    #region トランザクションをアナウンスする
    /// <summary>
    /// トランザクションをアナウンスする
    /// </summary>
    /// <param name="network"></param>
    /// <param name="facade"></param>
    /// <param name="publicKey"></param>
    /// <param name="txs"></param>
    /// <returns></returns>
    private async Task AnnounceAsync(Network network, SymbolFacade facade, PublicKey publicKey, List<IBaseTransaction?> txs)
    {
        var innerTransactions = txs.ToArray();

        var merkleHash = SymbolFacade.HashEmbeddedTransactions(innerTransactions);

        // 手数料を取得
        var feeInfo = await Utils.GetTransactionFee(_nodeUrl, httpClient);
        var feeMultiplier = Utils.CalcFee(feeInfo.MinFeeMultiplier, feeInfo.AverageFeeMultiplier);

        var aggTx = new AggregateCompleteTransactionV2
            {
                Network = string.Equals(network.Name, "mainnet") ? NetworkType.MAINNET : NetworkType.TESTNET,
                Transactions = innerTransactions,
                SignerPublicKey = publicKey,
                //Fee = new Amount(feeMultiplier),
                TransactionsHash = merkleHash,
                Deadline = new Timestamp(facade.Network.FromDatetime<NetworkTimestamp>(DateTime.UtcNow).AddHours(2).Timestamp),
            };
        var fee = aggTx.Size * feeMultiplier;
        aggTx.Fee = new Amount((ulong)fee);

        var payload = Converter.BytesToHex(aggTx.Serialize());

        var objRef = DotNetObjectReference.Create(this);
        try
        {
            await JSRuntime.InvokeVoidAsync("NageXymSharpApps.SetTransactionByPayload", new object[] { payload }, objRef);
        }
        catch (Exception ex)
        {
            await _notice.Error(new NotificationConfig()
            {
                Message = "ERROR",
                Description = ex.Message
            });
        }
        finally
        {
            if (objRef != null) objRef.Dispose();
            await Task.Delay(3000);
        }
    }
    #endregion

    #region SSSにて署名を行った後のトランザクションペイロードを受け取る
    /// <summary>
    /// SSSにて署名を行った後のトランザクションペイロードを受け取る
    /// </summary>
    /// <param name="signedTxPayload"></param>
    [JSInvokable]
    public static async Task GetSignedTransaction(string signedTxPayload)
    {
        if (string.IsNullOrEmpty(signedTxPayload))
        {
            Console.WriteLine(signedTxPayload);
            return;
        }

        var ms = new MemoryStream(Converter.HexToBytes(signedTxPayload));
        var br = new BinaryReader(ms);
        var aggTx = AggregateCompleteTransactionV2.Deserialize(br);
        var facade = new SymbolFacade(aggTx.Network == NetworkType.MAINNET ? Network.MainNet : Network.TestNet);
        var hash = facade.HashTransaction(aggTx);

        var payload = TransactionsFactory.CreatePayload(aggTx);

        try
        {
            // トランザクションをアナウンス
            var responseDetailJson = await Utils.AnnounceTransactionAsync(payload, _nodeUrl, _httpClient);

            // Messageがなければエラー。もしくはデシリアライズに失敗した場合もエラー
            Console.WriteLine(responseDetailJson.Message);

            await _audioObjRef.InvokeVoidAsync("start");

            await _notice.Success(new NotificationConfig()
            {
                Message = "Success",
                Description = "new confirmed transaction.",
                Duration = 3
            });

            await ExecuteTimer(hash.ToString(), aggTx.Network);

        }
        catch (Exception ex)
        {
            await _notice.Error(new NotificationConfig()
            {
                Message = "ERROR",
                Description = ex.Message,
            });
        }
    }
    #endregion

    #region TransactionStatusを確認する
    /// <summary>
    /// タイマーを起動する
    /// </summary>
    /// <param name="hash"></param>
    /// <returns></returns>
    public static async Task ExecuteTimer(string hash, NetworkType networkType)
    {
        var timer = new System.Timers.Timer(1000);

        var endTime = DateTime.Now.AddSeconds(60);
        timer.Elapsed += (sender, e) => OnTimeEvent(sender, e, hash, endTime, networkType);
        timer.Enabled = true;

        _timers.Add(hash, timer);
    }

    /// <summary>
    /// 一定時間毎に実行されるコード
    /// </summary>
    /// <param name="source"></param>
    /// <param name="e"></param>
    private static async Task OnTimeEvent(object source, System.Timers.ElapsedEventArgs e, string hash, DateTime endTime, NetworkType networkType)
    {
        _timers.TryGetValue(hash, out Timer timer);

        // トランザクションのステータスを監視する
        var txStatusResponse = await _httpClient.GetAsync($"/api/transactionStatus/{hash}?node_url={_nodeUrl}");
        if (txStatusResponse.IsSuccessStatusCode)
        {
            string responseBody = await txStatusResponse.Content.ReadAsStringAsync();
            var res = JsonConvert.DeserializeObject<TransactionStatusResponse>(responseBody);
            Console.WriteLine(responseBody);

            if(string.Equals(res.Group, "confirmed"))
            {
                timer!.Stop();
                timer.Dispose();
                _timers.Remove(hash);

                await _audioObjRef.InvokeVoidAsync("end");

                await _notice.Success(new NotificationConfig()
                {
                    Message = "Success",
                    Description = $"{Utils.GetBlockExplorerUrl(networkType)}transactions/{hash}",
                    Duration = 10
                });

            }
        }
        if(DateTime.Now > endTime)
        {
            timer.Stop();
            timer.Dispose();
            _timers.Remove(hash);

            await _notice.Success(new NotificationConfig()
            {
                Message = "Warning",
                Description = $"We monitored the hash for one minute, but the status did not change to confirmed. Please check if the transfer was successful using BlockExplorer or other means.\nhttps://testnet.symbol.fyi/transactions/{hash}",
                Duration = 10
            });
        }
    }
    #endregion

    #region JSRuntimeをDispose
    public async ValueTask DisposeAsync()
    {
        if (_sssObjRef is not null)
        {
            await _sssObjRef.DisposeAsync();
        }
    }
    #endregion
}